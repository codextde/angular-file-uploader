{"version":3,"sources":["../../../projects/angular-file-uploader/src/lib/angular-file-uploader.component.ts","../../../projects/angular-file-uploader/src/lib/angular-file-uploader.module.ts"],"names":["AngularFileUploaderComponent","http","this","resetUpload","ApiResponse","EventEmitter","everythingDone","allowedFiles","notAllowedFiles","Caption","isAllowedFileSingle","progressBarShow","enableUploadBtn","uploadMsg","afterUpload","uploadStarted","currentUploads","fileNameIndex","idDate","Date","prototype","ngOnChanges","changes","config","theme","id","parseInt","toString","split","Math","floor","random","hideProgressBar","hideResetBtn","hideSelectBtn","maxSize","uploadAPI","url","method","formatsAllowed","multiple","headers","params","responseType","replaceTexts","selectFileBtn","resetBtn","uploadBtn","dragNDropBox","attachPinBtn","afterUploadMsg_success","afterUploadMsg_error","sizeLimit","Object","assign","currentValue","resetFileUpload","onChange","event","fileList","fileExtRegExp","type","dataTransfer","files","target","srcElement","i","length","currentFileExt","exec","name","toLowerCase","isFormatValid","includes","isSizeValid","size","push","fileName","fileSize","convertSize","errorMsg","uploadFiles","uploadPercent","value","_this","isError","formData","FormData","forEach","file","append","options","request","toUpperCase","body","reportProgress","observe","subscribe","HttpEventType","UploadProgress","loaded","total","round","Response","status","uploadMsgText","uploadMsgClass","handleErrors","emit","error","removeFile","sf_na","splice","toFixed","attachpinOnclick","element","document","getElementById","click","drop","stopPropagation","preventDefault","allowDrop","dropEffect","Component","args","selector","template","HttpClient","Input","Output","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {\r\n  ReplaceTexts,\r\n  AngularFileUploaderConfig,\r\n  UploadInfo,\r\n  UploadApi,\r\n} from './angular-file-uploader.types';\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpParams,\r\n  HttpEventType,\r\n} from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'angular-file-uploader',\r\n  templateUrl: './angular-file-uploader.component.html',\r\n  styleUrls: ['./angular-file-uploader.component.css'],\r\n})\r\nexport class AngularFileUploaderComponent implements OnChanges {\r\n  // Inputs\r\n  @Input()\r\n  config: AngularFileUploaderConfig;\r\n\r\n  @Input()\r\n  resetUpload = false;\r\n\r\n  // Outputs\r\n  @Output()\r\n  ApiResponse = new EventEmitter();\r\n\r\n  @Output()\r\n  everythingDone: EventEmitter<UploadInfo[]> = new EventEmitter<UploadInfo[]>();\r\n\r\n  // Properties\r\n  theme: string;\r\n  id: number;\r\n  hideProgressBar: boolean;\r\n  maxSize: number;\r\n  uploadAPI: string;\r\n  method: string;\r\n  formatsAllowed: string;\r\n  multiple: boolean;\r\n  headers: HttpHeaders | { [header: string]: string | string[] };\r\n  params: HttpParams | { [param: string]: string | string[] };\r\n  responseType: string;\r\n  hideResetBtn: boolean;\r\n  hideSelectBtn: boolean;\r\n  allowedFiles: File[] = [];\r\n  notAllowedFiles: {\r\n    fileName: string;\r\n    fileSize: string;\r\n    errorMsg: string;\r\n  }[] = [];\r\n  Caption: string[] = [];\r\n  isAllowedFileSingle = true;\r\n  progressBarShow = false;\r\n  enableUploadBtn = false;\r\n  uploadMsg = false;\r\n  afterUpload = false;\r\n  uploadStarted = false;\r\n  uploadMsgText: string;\r\n  uploadMsgClass: string;\r\n  uploadPercent: number;\r\n  replaceTexts: ReplaceTexts;\r\n  currentUploads: any[] = [];\r\n  fileNameIndex = true;\r\n\r\n  private idDate: number = +new Date();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Track changes in Configuration and see if user has even provided Configuration.\r\n    if (changes.config && this.config) {\r\n      // Assign User Configurations to Library Properties.\r\n      this.theme = this.config.theme || '';\r\n      this.id =\r\n        this.config.id ||\r\n        parseInt((this.idDate / 10000).toString().split('.')[1], 10) +\r\n          Math.floor(Math.random() * 20) * 10000;\r\n      this.hideProgressBar = this.config.hideProgressBar || false;\r\n      this.hideResetBtn = this.config.hideResetBtn || false;\r\n      this.hideSelectBtn = this.config.hideSelectBtn || false;\r\n      this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.\r\n      this.uploadAPI = this.config.uploadAPI.url;\r\n      this.method = this.config.uploadAPI.method || 'POST';\r\n      this.formatsAllowed =\r\n        this.config.formatsAllowed || '.jpg,.png,.pdf,.docx,.txt,.gif,.jpeg';\r\n      this.multiple = this.config.multiple || false;\r\n      this.headers = this.config.uploadAPI.headers || {};\r\n      this.params = this.config.uploadAPI.params || {};\r\n      this.responseType = this.config.uploadAPI.responseType || null;\r\n      this.fileNameIndex = this.config.fileNameIndex === false ? false : true;\r\n      this.replaceTexts = {\r\n        selectFileBtn: this.multiple ? 'Select Files' : 'Select File',\r\n        resetBtn: 'Reset',\r\n        uploadBtn: 'Upload',\r\n        dragNDropBox: 'Drag N Drop',\r\n        attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',\r\n        afterUploadMsg_success: 'Successfully Uploaded !',\r\n        afterUploadMsg_error: 'Upload Failed !',\r\n        sizeLimit: 'Size Limit',\r\n      }; // default replaceText.\r\n      if (this.config.replaceTexts) {\r\n        // updated replaceText if user has provided any.\r\n        this.replaceTexts = {\r\n          ...this.replaceTexts,\r\n          ...this.config.replaceTexts,\r\n        };\r\n      }\r\n    }\r\n\r\n    // Reset when resetUpload value changes from false to true.\r\n    if (changes.resetUpload) {\r\n      if (changes.resetUpload.currentValue === true) {\r\n        this.resetFileUpload();\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // Reset following properties.\r\n  resetFileUpload() {\r\n    this.allowedFiles = [];\r\n    this.Caption = [];\r\n    this.notAllowedFiles = [];\r\n    this.uploadMsg = false;\r\n    this.enableUploadBtn = false;\r\n  }\r\n\r\n  // When user selects files.\r\n  onChange(event: any) {\r\n\r\n    this.notAllowedFiles = [];\r\n    const fileExtRegExp: RegExp = /(?:\\.([^.]+))?$/;\r\n    let fileList: FileList;\r\n\r\n    if (this.afterUpload || !this.multiple) {\r\n      this.allowedFiles = [];\r\n      this.Caption = [];\r\n      this.afterUpload = false;\r\n    }\r\n\r\n    if (event.type === 'drop') {\r\n      fileList = event.dataTransfer.files;\r\n    } else {\r\n      fileList = event.target.files || event.srcElement.files;\r\n    }\r\n\r\n    // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.\r\n    for (let i = 0; i < fileList.length; i++) {\r\n      const currentFileExt = fileExtRegExp\r\n        .exec(fileList[i].name)[1]\r\n        .toLowerCase(); // Get file extension.\r\n      const isFormatValid = this.formatsAllowed.includes(currentFileExt);\r\n\r\n      const isSizeValid = fileList[i].size <= this.maxSize;\r\n\r\n      // Check whether current file format and size is correct as specified in the configurations.\r\n      if (isFormatValid && isSizeValid) {\r\n        this.allowedFiles.push(fileList[i]);\r\n      } else {\r\n        this.notAllowedFiles.push({\r\n          fileName: fileList[i].name,\r\n          fileSize: this.convertSize(fileList[i].size),\r\n          errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size',\r\n        });\r\n      }\r\n    }\r\n\r\n    // If there's any allowedFiles.\r\n    if (this.allowedFiles.length > 0) {\r\n      this.enableUploadBtn = true;\r\n      // Upload the files directly if theme is attach pin (as upload btn is not there for this theme).\r\n      if (this.theme === 'attachPin') {\r\n        this.uploadFiles();\r\n      }\r\n    } else {\r\n      this.enableUploadBtn = false;\r\n    }\r\n\r\n    this.uploadMsg = false;\r\n    this.uploadStarted = false;\r\n    this.uploadPercent = 0;\r\n    event.target.value = null;\r\n  }\r\n\r\n  uploadFiles() {\r\n    this.progressBarShow = true;\r\n    this.uploadStarted = true;\r\n    this.notAllowedFiles = [];\r\n    let isError = false;\r\n    this.isAllowedFileSingle = this.allowedFiles.length <= 1;\r\n    const formData = new FormData();\r\n\r\n    // Add data to be sent in this request\r\n    this.allowedFiles.forEach((file, i) => {\r\n      formData.append(\r\n        this.Caption[i] || 'file' + (this.fileNameIndex ? i : ''),\r\n        this.allowedFiles[i]\r\n      );\r\n    });\r\n\r\n    /*\r\n    Not Working, Headers null\r\n    // Contruct Headers\r\n    const headers = new HttpHeaders();\r\n    for (const key of Object.keys(this.headers)) {\r\n      headers.append(key, this.headers[key]);\r\n    }\r\n\r\n    // Contruct Params\r\n    const params = new HttpParams();\r\n    for (const key of Object.keys(this.params)) {\r\n      params.append(key, this.params[key]);\r\n    } */\r\n\r\n    const options = {\r\n      headers: this.headers,\r\n      params: this.params,\r\n    };\r\n\r\n    if (this.responseType) (options as any).responseType = this.responseType;\r\n\r\n    this.http\r\n      .request(this.method.toUpperCase(), this.uploadAPI, {\r\n        body: formData,\r\n        reportProgress: true,\r\n        observe: 'events',\r\n        ...options,\r\n      })\r\n      .subscribe(\r\n        (event) => {\r\n          // Upload Progress\r\n          if (event.type === HttpEventType.UploadProgress) {\r\n            this.enableUploadBtn = false; // button should be disabled if process uploading\r\n            const currentDone = event.loaded / event.total;\r\n            this.uploadPercent = Math.round((event.loaded / event.total) * 100);\r\n          } else if (event.type === HttpEventType.Response) {\r\n            if (event.status === 200 || event.status === 201) {\r\n              // Success\r\n              this.progressBarShow = false;\r\n              this.enableUploadBtn = false;\r\n              this.uploadMsg = true;\r\n              this.afterUpload = true;\r\n              if (!isError) {\r\n                this.uploadMsgText = this.replaceTexts.afterUploadMsg_success;\r\n                this.uploadMsgClass = 'text-success lead';\r\n              }\r\n            } else {\r\n              // Failure\r\n              isError = true;\r\n              this.handleErrors();\r\n            }\r\n\r\n            this.ApiResponse.emit(event);\r\n          } else {\r\n            //console.log('Event Other: ', event);\r\n          }\r\n        },\r\n        (error) => {\r\n          // Failure\r\n          isError = true;\r\n          this.handleErrors();\r\n          this.ApiResponse.emit(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  handleErrors() {\r\n    this.progressBarShow = false;\r\n    this.enableUploadBtn = false;\r\n    this.uploadMsg = true;\r\n    this.afterUpload = true;\r\n    this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;\r\n    this.uploadMsgClass = 'text-danger lead';\r\n  }\r\n\r\n  removeFile(i: any, sf_na: any) {\r\n    if (sf_na === 'sf') {\r\n      this.allowedFiles.splice(i, 1);\r\n      this.Caption.splice(i, 1);\r\n    } else {\r\n      this.notAllowedFiles.splice(i, 1);\r\n    }\r\n\r\n    if (this.allowedFiles.length === 0) {\r\n      this.enableUploadBtn = false;\r\n    }\r\n  }\r\n\r\n  convertSize(fileSize: number): string {\r\n    return fileSize < 1024000\r\n      ? (fileSize / 1024).toFixed(2) + ' KB'\r\n      : (fileSize / 1024000).toFixed(2) + ' MB';\r\n  }\r\n\r\n  attachpinOnclick() {\r\n    const element = document.getElementById('sel' + this.id);\r\n    if (element !== null) {\r\n      element.click();\r\n    }\r\n  }\r\n\r\n  drop(event: any) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    this.onChange(event);\r\n  }\r\n\r\n  allowDrop(event: any) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'copy';\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { AngularFileUploaderComponent } from './angular-file-uploader.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [AngularFileUploaderComponent],\r\n  exports: [AngularFileUploaderComponent],\r\n})\r\nexport class AngularFileUploaderModule {}\r\n"]}